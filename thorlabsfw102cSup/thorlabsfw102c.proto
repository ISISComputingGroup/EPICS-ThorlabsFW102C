# Stream Device Protocol for the Thorlabs Filter Wheel Controller.
# This protocol uses features defined in Stream Device Version 2
#
# Commands and queries from Thorlabs FW102C User Guide - Rev M, October 4, 2023
#
# Command               Syntax      Description
# -------               ------      -----------
# Get ID                *idn?       Returns the model number and firmware version
# Set Position          pos=n       Moves the wheel to filter position n
# Get Position          pos?        Position Query
# Set Position Count    pcount=n    Sets the wheel type where n is 6 or 12
# Get Position Count    pcount?     Returns the wheel type
# Set Trigger Mode      trig=0      Sets the external trigger to the input mode
#                       trig=1      Sets the external trigger to the output mode
# Get Trigger Mode      Trig?       Returns the trigger mode
# Set Speed Mode        speed=0     Sets the move profile to slow speed
#                       speed=1     Sets the move profile to high speed
# Get Speed Mode        speed?      Returns the move profile mode
# Set Sensor Mode       sensors=0   Sensors turn off when wheel is idle to eliminate stray light
#                       sensors=1   Sensors remain active
# Get Sensor Mode       sensors?    Returns the sensor mode
# Set Baud Rate         baud=0      Sets the baud rate to 9600
#                       baud=1      Sets the baud rate to 115200
# Get Baud Rate         baud?       Returns the baud rate where 0 = 9600 and 1 = 115200
# Save Settings         save        This will save all the settings as default on power up
#
# Notes:
#   - Default framing is 115.2 kbaud, 8 data bits, 1 stop bit, no parity, no flow control.
# 
#   - The prompt symbol ">" will appear on power-up and after a command is accepted by the
#   FW102C and indicates that the FW102C is ready to receive another command line.
# 
#   - The FW02C is a 6 position filter wheel
#


#
# Disconnect (and likely auto-reconnect) whenever anything goes wrong.
#
@mismatch     { disconnect; }
@writetimeout { disconnect; }
@readtimeout  { disconnect; }
@replyTimeout { disconnect; }

#
# This is mandatory in order to get responses from the device
#
Terminator = CR;

#
# NOTE: Each read returns the sent query string, too. This is why the
#       input commands need to handle multi line input from the device.
#

#
# Get a string value, size is passed as second argument
#
getString {
    out "\$1?";
    in "%#/([> ])//\$1?";
    in "%\$2[^\r\n]";
    ExtraInput = Ignore;
}

#
# Get an integer (decimal) value
# The filter controller finishes all commands by sending a prompt ("> ")
# which has no CR terminator. We therefore need to consume this, if detected, on the next input.
# Sometimes the ">" character appears to go AWOL so just end up with a space.
# The regex substitutes either of these with empty string.
#
getD {
    out "\$1?";
    in "%#/([> ])//\$1?";
    in "%d";
    ExtraInput = Ignore;
}

#
# Set an integer (decimal) value
# Read back initial value on startup
#
setD {
   #@init { getD(\$1) }
    out "\$1=%d";
    ExtraInput = Ignore;
}
